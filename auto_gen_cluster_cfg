#!/usr/bin/env python
# encoding: utf-8
import argparse
import sys
import json
import traceback

def getMasterNode(parms):
    return parms.masterNode


def getPerNode(parms):
    return parms.perNode


def getPortOffset(parms):
    return parms.portOffset


def getLoginUser(parms):
    return str(parms.loginUser).strip()


def getLoginPwd(parms):
    return str(parms.loginPwd).strip()


def isWithRoleName(parms):
    return parms.withRolename


def parse_config():
    parser = argparse.ArgumentParser(description="generate cluster configuration automatic with hosts in hosts.txt")
    parser.add_argument('--masterNode', type=int, default=3,
                        help='choose the previous ips in hosts.txt as master nodes, default 3; '
                             'if hostsNum <= 3, --masterNode is invalid, default constant 3 masters on first host, perNode size data and coordinator instances on other hosts; '
                             'otherWise, choose the previous --masterNode ips as master nodes, perNode size data and coordinator instances on other hosts')
    parser.add_argument('--perNode', type=int, default=1,
                        help='choose how many ES dataNode and coordinator instances to deploy on each host')
    parser.add_argument('--portOffset', type=int, default=10,
                        help='choose the offset port num to assign the http.port(9200+portOffset) '
                             'and transport.tcp.port(9300+portOffset), default 10')
    parser.add_argument('--withRolename', type=bool, default=False,
                        help='auto generate and insert role name into node.name when value is True, default False')
    parser.add_argument('--loginUser', type=str, default='aidevops',
                        help='choose the loginUser to each node, default aidevops')
    parser.add_argument('--loginPwd', type=str, default='******',
                        help='choose the login password to each node, default ******')
    parser.add_argument('--clusterType', type=str, default='default',
                        help='specify the type of the cluster to deploy with pre-defined elasticsearch configurations'
                             'located in folder under config/es_config with exact name of the clusterType')
    parser.add_argument('--multi_node_soft_link', type=str, default='yes',
                        help='whether generate soft link of each node with their instance number suffix, '
                             'e.g. when set to True, a datanode will get a soft link \'es-datanode-1\' '
                             'if it\'s the only datanode in the host. If there are two datanode in the same host '
                             'at the same directory, they will get soft link \'es-datanode-1\' and \'es-datanode-2\' '
                             'representatively (and so on when have more than two node with same role). '
                             'Suffix number is assigned according to the order of the nodes list defined in '
                             '\'hosts\' list of cluster_nodes_cfg_template. '
                             'When set to False, datanode instance will get a soft link \'es-datanode\', '
                             'hence don\'t support multiple datanode in the same directory of a host')
    return parser.parse_args()


def readHostsLine(hostfile):
    hostlist = []
    with open(hostfile, 'r', encoding='utf-8') as f:
        hosts = f.readlines()

    for host in hosts:
        hoststr = str(host).strip()
        if len(hoststr) == 0 or hoststr.startswith("#"):
            continue
        if hoststr in hostlist:
            raise RuntimeError("two or more same ip " + hoststr + " exist in hosts file:" + hostfile)
        hostlist.append(hoststr)
    print('read %s ES cluster hosts' % len(hostlist))
    return hostlist


def readNodesInfoJson(jsonfile):
    fp = open(jsonfile, 'r')
    try:
        return json.load(fp)
    except Exception:
        print(("read data from json file %s failed." % jsonfile))
        raise
    finally:
        fp.close()


def writeJsonfile(jsondatas, configfile):
    fp = open(configfile, 'w')
    try:
        fp.write(json.dumps(jsondatas, indent=4))
    except Exception:
        print("rewrite data into json file failed")
        raise
    finally:
        fp.close()


def gen_hostinfo(ip, params, rangemax, rolelist):
    hostsInfos = []
    prefix = ''
    for role in rolelist:
        for i in range(0, rangemax):
            hostinfo = dict()
            hostinfo['ip'] = ip
            hostinfo['port'] = 22
            hostinfo['user'] = getLoginUser(params)
            hostinfo['password'] = getLoginPwd(params)

            if role == 'master':
                hostinfo['node.master'] = True
                hostinfo['node.data'] = False
                hostinfo['http.port'] = 9200 + getPortOffset(params) + i
                hostinfo['transport.tcp.port'] = 9300 + getPortOffset(params) + i
                prefix = str(i + 1)
            elif role == 'data':
                hostinfo['node.master'] = False
                hostinfo['node.data'] = True
                hostinfo['http.port'] = 9200 + getPortOffset(params) + i
                hostinfo['transport.tcp.port'] = 9300 + getPortOffset(params) + i
                prefix = str(i + 1)
            else:
                hostinfo['node.master'] = False
                hostinfo['node.data'] = False
                hostinfo['http.port'] = 9200 + getPortOffset(params) + rangemax + i
                hostinfo['transport.tcp.port'] = 9300 + getPortOffset(params) + rangemax + i
                prefix = str(i + rangemax + 1)

            if isWithRoleName(params) or getPerNode(params) > 1:
                prefix = str(i + 1)
                hostinfo['node.name'] = 'es-' + role + '-' + ip.replace('.', '_') + "-" + prefix
            else:
                hostinfo['node.name'] = "es-" + ip.replace('.', '_') + "-" + prefix
            hostinfo['node.ingest'] = True
            hostinfo['node.realtime'] = False
            hostsInfos.append(hostinfo)

    return hostsInfos


def genCfg(hosts, params):
    perNodeNum = getPerNode(params)
    masterNodeNum = getMasterNode(params)
    hostsInfos = []
    print('choose %s ES instance per nodes.(default 3 for master)' % perNodeNum)
    if len(hosts) > 3 and masterNodeNum >= len(hosts):
        raise RuntimeError('When the number of node lists is greater than 3, the total number of masterNodeNum[%s]'
                           ' cannot be greater than or equal to total number of nodes[%s]' % (masterNodeNum, len(hosts)))
    for host in hosts:
        nodeindex = hosts.index(host)
        hoststr = str(host).strip()
        if len(hoststr) == 0 or hoststr.startswith("#"):
            continue

        # if hosts num <= 3; then the first node generate 3 master es instances
        # if hosts num more than 3; then the previous masterNodeNum nodes generate 1 master es instance per node
        # the left other hosts will auto generate perNodeNum instances for data node And perNodeNum instances for cordinator node;
        # all node default to ingestnode
        rolelist = []
        if len(hosts) <= 3:
            if nodeindex == 0:
                rolelist.append('master')
                rangemax = 3
            else:
                rolelist.append('data')
                rolelist.append('coordinator')
                rangemax = perNodeNum
        else:
            if nodeindex < masterNodeNum:
                rolelist.append('master')
                rangemax = 1
            else:
                rolelist.append('data')
                rolelist.append('coordinator')
                rangemax = perNodeNum

        hostinfo = gen_hostinfo(hoststr, params, rangemax, rolelist)
        hostsInfos.extend(hostinfo)
    print('auto generate %s ES instances configuration' % len(hostsInfos))
    return hostsInfos


if len(sys.argv) >= 0:
    try:
        params = parse_config()
        hostsfile = "./config/hosts.txt"
        templatefile = "./config/cluster_nodes_cfg_template.json"
        outputfile = "./config/cluster_nodes_cfg_template.json"
        hostlist = readHostsLine(hostsfile)
        jsondatas = readNodesInfoJson(templatefile)
        # there must be an key named hosts in template.json
        if 'hosts' not in jsondatas:
            raise RuntimeError('there must be an key named [hosts] in template json')

        hosts = genCfg(hostlist, params)
        jsondatas['hosts'] = hosts
        jsondatas['clusterType'] = params.clusterType
        jsondatas['multi_node_soft_link'] = params.multi_node_soft_link
        writeJsonfile(jsondatas, outputfile)
        print('auto generate default config into %s ok ' % outputfile)
    except Exception as e:
        print((repr(e)))
        traceback.print_tb(e.__traceback__)
        sys.exit(1)
else:
    print('argv num error')
    sys.exit(1)
